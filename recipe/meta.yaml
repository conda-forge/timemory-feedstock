{% set name = "timemory" %}
{% set version = "3.2.3" %}
{% set build = 4 %}

{% set generator = "Unix Makefiles" %}    # [not win]
{% set generator = "NMake Makefiles" %}   # [win]

{% set cmake_args = "-DCMAKE_CUDA_STANDARD=14" %}   # [cuda_compiler_version != "None"]
{% set cmake_args = "" %}                           # [cuda_compiler_version == "None"]

{% set generator_args = "-j2" %}  # [osx]
{% set generator_args = "-j1" %}  # [linux]
{% set generator_args = "" %}     # [win]

{% set cxx_standard = "17" %}     # [not osx and cuda_compiler_version == "None"]
{% set cxx_standard = "14" %}     # [osx or cuda_compiler_version != "None"]

# Set MPI related variables
{% if mpi != "nompi" %}
  {% set mpi_build_prefix = "_" + mpi|string %}
  {% set mpi_args = "--enable-mpi" %}
  {% set build = build + 100 %}
{% else %}
  {% set mpi_build_prefix = "" %}
  {% set mpi_args = "--disable-mpi" %}
{% endif %}

# Set CUDA related variables
{% if cuda_compiler_version != "None" %}
  {% set cuda_build_prefix = "_cuda" + cuda_compiler_version|string %}
  {% set cuda_args = "--enable-cuda --enable-nccl" %}
  {% set build = build + 1000 %}
{% else %}
  {% set cuda_build_prefix = "" %}
  {% set cuda_args = "--disable-cuda --disable-nccl" %}
{% endif %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: 2335961755a304bfc33a8d2427161c13f9592f87ae7a7ae8c901ca41c0127504

build:
  number: {{ build }}
  string: "py{{ py }}{{ mpi_build_prefix }}{{ cuda_build_prefix }}h{{ PKG_HASH }}_{{ build }}"
  script: "{{ PYTHON }} setup.py install --single-version-externally-managed --record record.txt \
    -G \"{{ generator }}\" \
    --cxx-standard={{ cxx_standard }} \
    --enable-portable \
    --enable-shared-libs \
    {{ cuda_args }} \
    {{ mpi_args }} \
    --disable-c \
    --disable-fortran \
    --disable-ert \
    --disable-develop \
    --disable-static-libs \
    --disable-unity-build \
    --disable-require-packages \
    --disable-ompt \
    --disable-cupti \
    --disable-upcxx \
    --disable-kokkos \
    --disable-caliper \
    --disable-dyninst \
    --disable-gperftools \
    --disable-compiler-instrumentation \
    --disable-install-rpath-use-link-path \
    --skip-generator-test \
    -- {{ cmake_args }} \
       -DCMAKE_VERBOSE_MAKEFILE=ON \
    -- {{ generator_args }}"
  skip: true                  # [(x86 and not x86_64) or (osx and py==36)]
  skip: true  # [win and cuda_compiler_version != "None"]

requirements:
  build:
    - {{ compiler("c") }}
    - {{ compiler("cxx") }}
    - {{ compiler("cuda") }}  # [linux and cuda_compiler_version != "None"]
    - cmake
  host:
    - python
    - pip
    - cython
    - pybind11
    - pybind11-abi
    - scikit-build
    - nccl                    # [linux and cuda_compiler_version != "None"]
    - {{ mpi }}               # [linux and mpi != "nompi"]
  run:
    - python
    - six
    - numpy
    - pydot
    - pillow
    - pandas
    - matplotlib-base
    - multiprocess
    - IPython >=0.13
    - {{ mpi }}               # [linux and mpi != "nompi"]

test:
  imports:
    - timemory
    - timemory.settings
    - timemory.profiler
    - timemory.trace
    - timemory.util
  requires:
    - pytest                  # [linux]
    - pytest-timeout          # [linux]
    - mpi4py                  # [linux and mpi != "nompi" and mpi != "openmpi"]
  source_files:
    - timemory/test/*
  commands:
    - timemory-python-line-profiler -h
    - timemory-python-profiler -h
    - timemory-python-trace -h
    - timemory-roofline -h
    - timemory-analyze -h
    - timemory-plotter -h
    - timemory-avail -a
    - timem -h                                                        # [not win]
    - pytest --timeout=300 --pyargs timemory -k "not test_mallocp"    # [linux]
    # skip pytest for windows and osx. Tend to have spurious failures due to other builds

about:
  home: https://github.com/NERSC/timemory
  license: MIT
  license_family: MIT
  license_file: LICENSE
  summary: Lightweight performance analysis toolkit and suite of tools
  description: |
    Lightweight, cross-language utility for recording timing, memory, resource usage, and hardware counters on the CPU and GPU.
    Timemory provides 40+ metrics for C, C++, CUDA, and/or Python codes that can arbitrarily composed into distinct toolsets
    which can inter-weaved and without nesting restrictions.
  doc_url: https://timemory.readthedocs.io/
  dev_url: https://github.com/NERSC/timemory

extra:
  recipe-maintainers:
    - jrmadsen
